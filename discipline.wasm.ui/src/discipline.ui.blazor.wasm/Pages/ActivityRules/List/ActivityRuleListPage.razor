@page "/activity-rules-list"
@using BlazorBootstrap
@using discipline.ui.communication.http.ActivityRules.DTOs.Responses
@using discipline.ui.infrastructure.ActivityRules.Facades
@using discipline.ui.blazor.wasm.Components.Headers
@using discipline.ui.blazor.wasm.Components.Paragraphs
@using discipline.ui.blazor.wasm.Components.Rows
@using discipline.ui.blazor.wasm.Components.Buttons
@using discipline.ui.blazor.wasm.Pages.ActivityRules.Form
@using discipline.ui.infrastructure.ActivityRules.Models
@using discipline.ui.infrastructure.Constants
@inject IActivityRulesBrowseFacade ActivityRulesBrowseFacade
@inject IDeleteActivityRuleFacade DeleteActivityRuleFacade
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<DisciplinePageHeader Title="Activity Rules List"/>

@if (_activityRules.Any())
{
    @foreach (var activityRule in _activityRules)
    {
        <DisciplineSelectingRow
            OnRowClickCallback="@(() => OpenActivityRuleForm(activityRule))"
            OnTrashClickCallback="async () => await RemoveActivityRuleAsync(activityRule.ActivityRuleId)">
            <div class="col-md-5">
                <MainParagraph Content="@activityRule.Details.Title"/>
            </div>
            <div class="col-md-5 text-end">
                <SubParagraph Content=@GetModeWithSelectedDays(activityRule)/>
            </div>
        </DisciplineSelectingRow>
        @if (activityRule.Stages.Any())
        {
            <div class="col-md-10 offset-lg-1">
                @foreach (var stage in activityRule.Stages)
                {
                    <DisciplineSelectingRow
                        OnRowClickCallback="OpenEditActivityRuleStageAsync"
                        OnTrashClickCallback="RemoveActivityRuleStageAsync">
                        <SubParagraph Content="@GetStageHeader(stage)"/>
                    </DisciplineSelectingRow>
                }
            </div>
        }
    }
}

<DisciplineCreateButton
    OnClickButtonCallback="() => (null)"/>

<ActivityRuleForm
    @ref="_activityRuleForm"
    OnFormSubmitted="FillActivityRules"/>

@code {
    private CancellationTokenSource _cts = new();
    private List<ActivityRuleResponseDto> _activityRules = [];
    private ActivityRuleForm? _activityRuleForm;

    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        await FillActivityRules();
    }

    private async Task FillActivityRules()
    {
        var result = await ActivityRulesBrowseFacade.HandleAsync(_cts.Token);

        if (result is { IsT1: true, AsT1: "user.unauthorized" })
        {
            NavigationManager.NavigateTo("/sign-in", true);
        }

        _activityRules = result.AsT0.ToList();
    }

    private string GetModeWithSelectedDays(ActivityRuleResponseDto activityRule)
        => activityRule.Mode.Days is null
            ? activityRule.Mode.Mode
            : $"{activityRule.Mode.Mode} ({GetDaysName(activityRule.Mode.Days)})";
    
    private string GetDaysName(HashSet<int> days)
        => days.Count > 2 
            ? $"{WeekDay.ToName(days.First())}, ..., {WeekDay.ToName(days.Last())}"
            : string.Join(',', days.Select(WeekDay.ToName));

    private string GetStageHeader(ActivityRuleStageResponseDto stage)
        => $"{stage.Index}. {stage.Title}";

    private void OpenActivityRuleForm(ActivityRuleResponseDto? activityRuleResponse)
    {
        if (_activityRuleForm is null)
        {
            return;
        }

        if (activityRuleResponse is not null)
        {
            _activityRuleForm.ActivityRule = new WriteActivityRuleDto
            {
                Title = activityRuleResponse.Details.Title,
                Note = activityRuleResponse.Details.Note,
                Mode = activityRuleResponse.Mode.Mode,
                Days = activityRuleResponse.Mode.Days?.ToList()
            };

            _activityRuleForm.ActivityRuleId = activityRuleResponse.ActivityRuleId;   
        }
        
        _activityRuleForm.Open();
    }
    
    private async Task RemoveActivityRuleAsync(string activityRuleId)
    {
        var result = await DeleteActivityRuleFacade.HandleAsync(activityRuleId, _cts.Token);

        if (result is { IsT1: true, AsT1: "user.unauthorized" })
        {
            NavigationManager.NavigateTo("/sign-in", true);
        }

        if (result.IsT1)
        {
            ToastService.Notify(result.AsT1.ToDangerToastMessage());
        }

        await FillActivityRules();
    }
    
    private async Task OpenEditActivityRuleStageAsync()
    {
        await Task.Delay(1);
    }

    private async Task RemoveActivityRuleStageAsync()
    {
        await Task.Delay(1);
    }

}