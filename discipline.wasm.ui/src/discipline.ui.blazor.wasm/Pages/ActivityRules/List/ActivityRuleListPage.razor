@page "/activity-rules-list"
@using BlazorBootstrap
@using discipline.ui.blazor.wasm.Components.Headers
@using discipline.ui.blazor.wasm.Components.Paragraphs
@using discipline.ui.blazor.wasm.Components.Rows
@using discipline.ui.blazor.wasm.Components.Buttons
@using discipline.ui.blazor.wasm.Pages.ActivityRules.Form
@using discipline.ui.infrastructure.Clients.DTOs.ActivityRules.Responses
@using discipline.ui.infrastructure.Constants
@using discipline.ui.infrastructure.DailyTrackers.DailyTrackers
@using discipline.ui.infrastructure.DTOs.ActivityRules
@using discipline.ui.infrastructure.Facades.ActivityRules.Facades
@using Microsoft.AspNetCore.Components.Authorization
@using OneOf
@inject IActivityRuleClientFacade ActivityRuleClientFacade
@inject IDailyTrackerClientFacade DailyTrackerClientFacade
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<DisciplinePageHeader Title="Activity Rules List"/>

@if (_activityRules.Any())
{
    @foreach (var activityRule in _activityRules)
    {
        <div class="row">
            <div class="col-md-1">
                <DisciplineIconButton
                    IconClass="bi-pass-fill"
                    OnClickButtonCallback="@(() => CreateActivityFromRule(activityRule.ActivityRuleId))"/>
            </div>
            <div class="col-md-11">
                <DisciplineSelectingRow
                    OnRowClickCallback="@(() => OpenActivityRuleForm(activityRule))"
                    OnAdditionalButtonCallback="() => OpenStageForm(activityRule.ActivityRuleId)"
                    OnTrashClickCallback="async () => await RemoveActivityRuleAsync(activityRule.ActivityRuleId)">
                    <div class="col-md-5">
                        <MainParagraph Content="@activityRule.Details.Title"/>
                    </div>
                    <div class="col-md-5 text-end">
                        <SubParagraph Content=@GetModeWithSelectedDays(activityRule)/>
                    </div>
                </DisciplineSelectingRow>
            </div>
        </div>
        @if (activityRule.Stages.Any())
        {
            <div class="col-md-10 offset-lg-1">
                @foreach (var stage in activityRule.Stages)
                {
                    <DisciplineSelectingRow
                        OnRowClickCallback="OpenEditActivityRuleStageAsync"
                        OnTrashClickCallback="() => RemoveActivityRuleStageAsync(activityRule.ActivityRuleId, stage.StageId)">
                        <SubParagraph Content="@GetStageHeader(stage)"/>
                    </DisciplineSelectingRow>
                }
            </div>
        }
    }
}

<DisciplineCreateButton
    OnClickButtonCallback="() => OpenActivityRuleForm(null)"/>

<ActivityRuleForm
    @ref="_activityRuleForm"
    OnFormSubmitted="FillActivityRules"/>

<StageForm
    @ref="_stageForm"
    OnFormSubmitted="FillActivityRules"/>

@code {
    private CancellationTokenSource _cts = new();
    private List<ActivityRuleDto> _activityRules = [];
    private ActivityRuleForm? _activityRuleForm;
    private StageForm? _stageForm;
    
    protected override async Task OnInitializedAsync()
    {
        if ((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated ?? true)
        {
            NavigationManager.NavigateTo("sign-in", true);
        }
        _cts = new CancellationTokenSource();
        await FillActivityRules();
    }

    private async Task FillActivityRules()
    {
        var result = await ActivityRuleClientFacade.BrowseAsync(_cts.Token);

        if (result is { IsT1: true, AsT1: "user.unauthorized" })
        {
            NavigationManager.NavigateTo("/sign-in", true);
        }

        _activityRules = result.AsT0.ToList();
    }

    private string GetModeWithSelectedDays(ActivityRuleDto activityRule)
        => activityRule.Mode.Days is null
            ? activityRule.Mode.Mode
            : $"{activityRule.Mode.Mode} ({GetDaysName(activityRule.Mode.Days)})";
    
    private string GetDaysName(HashSet<int> days)
        => days.Count > 2 
            ? $"{WeekDay.ToName(days.First())}, ..., {WeekDay.ToName(days.Last())}"
            : string.Join(',', days.Select(WeekDay.ToName));

    private string GetStageHeader(ActivityRuleStageResponseDto stage)
        => $"{stage.Index}. {stage.Title}";

    private void OpenActivityRuleForm(ActivityRuleDto? activityRuleResponse)
    {
        if (_activityRuleForm is null)
        {
            return;
        }

        if (activityRuleResponse is not null)
        {
            _activityRuleForm.ActivityRule = new WriteActivityRuleDto
            {
                Title = activityRuleResponse.Details.Title,
                Note = activityRuleResponse.Details.Note,
                Mode = activityRuleResponse.Mode.Mode,
                Days = activityRuleResponse.Mode.Days?.ToList()
            };

            _activityRuleForm.ActivityRuleId = activityRuleResponse.ActivityRuleId;   
        }
        
        _activityRuleForm.Open();
    }
    
    private async Task RemoveActivityRuleAsync(string activityRuleId)
    {
        var result = await DeleteActivityRuleFacade.HandleAsync(activityRuleId, _cts.Token);

        await HandleResponseAndRefresh(result);
    }

    private void OpenStageForm(string activityRuleId)
    {
        if (_stageForm is null)
        {
            return;
        }

        _stageForm.ActivityRuleId = activityRuleId;
        _stageForm.Open();
    }
    
    private async Task OpenEditActivityRuleStageAsync()
    {
        await Task.Delay(1);
    }

    private async Task RemoveActivityRuleStageAsync(string activityRuleId, string stageId)
    {
        var result = await ActivityRuleClientFacade.DeleteStageAsync(
            activityRuleId, stageId, _cts.Token);

        await HandleResponseAndRefresh(result);
    }

    private async Task CreateActivityFromRule(string activityRuleId)
    {
        var result = await DailyTrackerClientFacade.CreateActivityFromActivityRuleAsync(
            activityRuleId,
            _cts.Token);
        
        if (result is { IsT1: true, AsT1: "user.unauthorized" })
        {
            NavigationManager.NavigateTo("/sign-in", true);
        }

        if (result.IsT1)
        {
            ToastService.Notify(result.AsT1.ToDangerToastMessage());
            return;
        }
        
        ToastService.Notify(new ToastMessage(
            ToastType.Success,
            "Added activity successfully"));
    }

    private async Task HandleResponseAndRefresh(OneOf<bool, string> result)
    {
        // Global variable for unauthorized response
        if (result is { IsT1: true, AsT1: "user.unauthorized" })
        {
            NavigationManager.NavigateTo("/sign-in", true);
        }

        if (result.IsT1)
        {
            ToastService.Notify(result.AsT1.ToDangerToastMessage());
            return;
        }

        await FillActivityRules(); 
    }

}